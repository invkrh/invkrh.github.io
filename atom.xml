<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yorozuya</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://invkrh.me/"/>
  <updated>2019-01-30T14:43:56.214Z</updated>
  <id>http://invkrh.me/</id>
  
  <author>
    <name>Hao Ren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Interview Questions in 2018</title>
    <link href="http://invkrh.me/2019/12/19/intervew-questions-in-2018/"/>
    <id>http://invkrh.me/2019/12/19/intervew-questions-in-2018/</id>
    <published>2019-12-18T23:00:00.000Z</published>
    <updated>2019-01-30T14:43:56.214Z</updated>
    
    <content type="html"><![CDATA[<p>A list of coding interview question I encountered in 2018.</p><a id="more"></a><h2 id="Question-1-Add-Binary"><a href="#Question-1-Add-Binary" class="headerlink" title="Question 1: Add Binary"></a>Question 1: Add Binary</h2><h3 id="Statement-leetcode-791"><a href="#Statement-leetcode-791" class="headerlink" title="Statement (leetcode: 791)"></a>Statement (leetcode: 791)</h3><p>Given two binary strings, return their sum (also a binary string).<br>The input strings are both non-empty and contains only characters 1 or 0.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = a.length() - <span class="number">1</span>, j = b.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = carry;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sum += a.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sum += b.charAt(j) - <span class="string">'0'</span>;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        carry = sum / <span class="number">2</span>;</span><br><span class="line">        sb.insert(<span class="number">0</span>, sum % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry != <span class="number">0</span>) sb.insert(<span class="number">0</span>, carry);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>/</td></tr><tr><td>Space</td><td>O(n)</td><td>StringBuilder</td></tr></tbody></table></div><h3 id="Extention"><a href="#Extention" class="headerlink" title="Extention"></a>Extention</h3><p>What if the given strings can be numbers of any base ?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = a.length() - <span class="number">1</span>, j = b.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = carry;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sum += a.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sum += b.charAt(j) - <span class="string">'0'</span>;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        carry = sum / <span class="number">2</span>;</span><br><span class="line">        sb.insert(<span class="number">0</span>, sum % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry != <span class="number">0</span>) sb.insert(<span class="number">0</span>, carry);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Question-2-cd-command"><a href="#Question-2-cd-command" class="headerlink" title="Question 2: cd command"></a>Question 2: <code>cd</code> command</h2><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>Write a function to simluate linux command <code>cd</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: cur = &quot;/etc&quot;, path = &quot;/bin/&quot;</span><br><span class="line">Output: &quot;/bin&quot;</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: a = &quot;/etc&quot;, b = &quot;hadoop&quot;</span><br><span class="line">Output: &quot;/etc/hadoop&quot;</span><br><span class="line"></span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: a = &quot;/etc/hadoop/conf&quot;, b = &quot;../../hive&quot;</span><br><span class="line">Output: &quot;/etc/hive&quot;</span><br><span class="line"></span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input: a = &quot;/etc/hadoop/conf&quot;, b = &quot;.././conf&quot;</span><br><span class="line">Output: &quot;/etc/hadoop/conf&quot;</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">cd</span><span class="params">(String cur, String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (path.startsWith(<span class="string">"/"</span>)) <span class="keyword">return</span> path;</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String dir : cur.split(<span class="string">"/"</span>))</span><br><span class="line">        <span class="keyword">if</span> (!dir.isEmpty()) stack.push(dir);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String dir : path.split(<span class="string">"/"</span>))</span><br><span class="line">        <span class="keyword">if</span> (dir.equals(<span class="string">".."</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) stack.pop();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!dir.equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">            stack.push(dir);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    String res = String.join(<span class="string">"/"</span>, stack);</span><br><span class="line">    <span class="keyword">return</span> res.startsWith(<span class="string">"/"</span>) ? res : <span class="string">"/"</span> + res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>/</td></tr><tr><td>Space</td><td>O(n)</td><td>Stack</td></tr></tbody></table></div><h2 id="Question-3-Custom-Sort-String"><a href="#Question-3-Custom-Sort-String" class="headerlink" title="Question 3: Custom Sort String"></a>Question 3: Custom Sort String</h2><h3 id="Statement-leetcode-791-1"><a href="#Statement-leetcode-791-1" class="headerlink" title="Statement (leetcode: 791)"></a>Statement (leetcode: 791)</h3><p><code>S</code> and <code>T</code> are strings composed of lowercase letters. In <code>S</code>, no letter occurs more than once.<br><code>S</code> was sorted in some custom order previously. We want to permute the characters of <code>T</code> so that they match the order that <code>S</code> was sorted. More specifically, if <code>x</code> occurs before <code>y</code> in <code>S</code>, then <code>x</code> should occur before <code>y</code> in the returned string.<br>Return any permutation of <code>T</code> (as a string) that satisfies this property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example :</span><br><span class="line"></span><br><span class="line">Input: S = &quot;cba&quot;, T = &quot;abcd&quot;</span><br><span class="line">Output: &quot;cbad&quot;</span><br><span class="line"></span><br><span class="line">Explanation: </span><br><span class="line">&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in S, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. </span><br><span class="line">Since &quot;d&quot; does not appear in S, it can be at any position in T. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.</span><br></pre></td></tr></table></figure><p>Note:</p><ul><li>S has length at most 26, and no character is repeated in S.</li><li>T has length at most 200.</li><li>S and T consist of lowercase letters only.</li></ul><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">customSortString</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dict = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : T.toCharArray()) &#123;</span><br><span class="line">        dict[c - <span class="string">'a'</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : S.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dict[c - <span class="string">'a'</span>]; i++)</span><br><span class="line">            sb.append(c);</span><br><span class="line">        dict[c - <span class="string">'a'</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dict[c - <span class="string">'a'</span>]; i++)</span><br><span class="line">            sb.append(c);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>/</td></tr><tr><td>Space</td><td>O(n)</td><td>StringBuilder</td></tr></tbody></table></div><h2 id="Question-4-Position-of-the-leftmost-one"><a href="#Question-4-Position-of-the-leftmost-one" class="headerlink" title="Question 4: Position of the leftmost one"></a>Question 4: Position of the leftmost one</h2><h3 id="Statement-1"><a href="#Statement-1" class="headerlink" title="Statement"></a>Statement</h3><p>Given a binary matrix (containing only 0 and 1) of order <code>n * n</code>. All rows are sorted already. We need to find position of the left most 1.<br>Note: in case of tie, return the position of the smallest row number.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input matrix</span><br><span class="line">0 1 1 1</span><br><span class="line">0 0 1 1</span><br><span class="line">1 1 1 1  // this row has maximum 1s</span><br><span class="line">0 0 0 0</span><br><span class="line"></span><br><span class="line">Output: [2, 0]</span><br></pre></td></tr></table></figure><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] findPosition(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line">    <span class="keyword">int</span> r = matrix.length;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> c = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> j = c - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; matrix[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">            j--;</span><br><span class="line">            res = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i, j + <span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(r + c)</td><td>ends on the boundary</td></tr><tr><td>Space</td><td>O(1)</td><td>/</td></tr></tbody></table></div><h2 id="Question-5-Validate-Binary-Search-Tree"><a href="#Question-5-Validate-Binary-Search-Tree" class="headerlink" title="Question 5: Validate Binary Search Tree"></a>Question 5: Validate Binary Search Tree</h2><h3 id="Statement-leetcode-98"><a href="#Statement-leetcode-98" class="headerlink" title="Statement (leetcode: 98)"></a>Statement (leetcode: 98)</h3><p>Given a binary tree, determine if it is a valid binary search tree (BST).<br>Assume a BST is defined as follows:</p><ul><li>The left subtree of a node contains only nodes with keys less than the node’s key.</li><li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  1   4</span><br><span class="line">     / \</span><br><span class="line">    3   6</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The input is: [5,1,4,null,null,3,6]. The root node&apos;s value</span><br><span class="line">             is 5 but its right child&apos;s value is 4.</span><br></pre></td></tr></table></figure><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(TreeNode node, <span class="keyword">long</span> min, <span class="keyword">long</span> max)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.val &gt; min &amp;&amp; node.val &lt; max) &#123;</span><br><span class="line">            <span class="keyword">return</span> validate(node.left, min, node.val) &amp;&amp; validate(node.right, node.val, max);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> validate(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>visit all the nodes</td></tr><tr><td>Space</td><td>O(log n)</td><td>recursice call stack</td></tr></tbody></table></div><h2 id="Question-6-Search-word-in-the-dictionary"><a href="#Question-6-Search-word-in-the-dictionary" class="headerlink" title="Question 6: Search word in the dictionary"></a>Question 6: Search word in the dictionary</h2><h3 id="Statement-leetcode-211"><a href="#Statement-leetcode-211" class="headerlink" title="Statement (leetcode: 211)"></a>Statement (leetcode: 211)</h3><p>Design a data structure that supports the following two operations:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize data structure */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordDictionary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">/** Adds a word into the data structure. */</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addWord</span><span class="params">(word)</span></span></span><br><span class="line"><span class="function">bool <span class="title">search</span><span class="params">(word)</span></span></span><br></pre></td></tr></table></figure><p><code>search(word)</code> can search a literal word or a regular expression string containing only letters a-z or <code>.</code>. A <code>.</code> means it can represent any one letter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">addWord(<span class="string">"bad"</span>)</span><br><span class="line">addWord(<span class="string">"dad"</span>)</span><br><span class="line">addWord(<span class="string">"mad"</span>)</span><br><span class="line">search(<span class="string">"pad"</span>) -&gt; <span class="keyword">false</span></span><br><span class="line">search(<span class="string">"bad"</span>) -&gt; <span class="keyword">true</span></span><br><span class="line">search(<span class="string">".ad"</span>) -&gt; <span class="keyword">true</span></span><br><span class="line">search(<span class="string">"b.."</span>) -&gt; <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        TrieNode[] next = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        String word = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Adds a word into the data structure. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (node.next[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) node.next[c - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            node = node.next[c - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        node.word = word;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> match(word, <span class="number">0</span>, root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(String word, <span class="keyword">int</span> i, TrieNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == word.length()) <span class="keyword">return</span> node.word != <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TrieNode nextNode : node.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nextNode != <span class="keyword">null</span> &amp;&amp; match(word, i + <span class="number">1</span>, nextNode)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TrieNode nextNode = node.next[c - <span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">return</span> nextNode != <span class="keyword">null</span> &amp;&amp; match(word, i + <span class="number">1</span>, nextNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>add</th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>/</td></tr><tr><td>Space</td><td>O(n)</td><td>node creation</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>search</th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>/</td></tr><tr><td>Space</td><td>O(n)</td><td>recursive call stack</td></tr></tbody></table></div><h2 id="Question-7-Valid-Palindrome"><a href="#Question-7-Valid-Palindrome" class="headerlink" title="Question 7: Valid Palindrome"></a>Question 7: Valid Palindrome</h2><h3 id="Statement-leetcode-125"><a href="#Statement-leetcode-125" class="headerlink" title="Statement (leetcode: 125)"></a>Statement (leetcode: 125)</h3><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.<br>Note: For the purpose of this problem, we define empty string as valid palindrome.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;race a car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) || (c &gt;= <span class="string">'A'</span> &amp;&amp; c &lt;= <span class="string">'Z'</span>) || (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isValid(s.charAt(i))) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isValid(s.charAt(j))) &#123;</span><br><span class="line">            j--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Character.toLowerCase(s.charAt(i)) == Character.toLowerCase(s.charAt(j))) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>/</td></tr><tr><td>Space</td><td>O(1)</td><td>/</td></tr></tbody></table></div><h2 id="Question-8-Shortest-Distance-To-All-Stations"><a href="#Question-8-Shortest-Distance-To-All-Stations" class="headerlink" title="Question 8: Shortest Distance To All Stations"></a>Question 8: Shortest Distance To All Stations</h2><h3 id="Statement-2"><a href="#Statement-2" class="headerlink" title="Statement"></a>Statement</h3><img src="/2019/12/19/intervew-questions-in-2018/tube-map.gif" title="London Tube Map"><p>Given a metro map of London, find the station which is closest to all the others stations.</p><h3 id="Solution-Floyd–Warshall-algorithm"><a href="#Solution-Floyd–Warshall-algorithm" class="headerlink" title="Solution (Floyd–Warshall algorithm)"></a>Solution (Floyd–Warshall algorithm)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** graph is a weighted undirected adjacency matrix */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span>[][] graph)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = graph.length;</span><br><span class="line">    <span class="keyword">double</span>[][] dist = <span class="keyword">new</span> <span class="keyword">double</span>[n][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dist[i][j] = graph[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Floyd–Warshall algorithm */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist[i][j] &gt; dist[i][k] + dist[k][j]) &#123;</span><br><span class="line">                    dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> d : dist[i])</span><br><span class="line">            sum += d;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; min) &#123;</span><br><span class="line">            res = i;</span><br><span class="line">            min = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n ^ 3)</td><td>/</td></tr><tr><td>Space</td><td>O(n ^ 2)</td><td>/</td></tr></tbody></table></div><h2 id="Question-9-Equilibrium-Point"><a href="#Question-9-Equilibrium-Point" class="headerlink" title="Question 9: Equilibrium Point"></a>Question 9: Equilibrium Point</h2><h3 id="Statement-leetcode-724"><a href="#Statement-leetcode-724" class="headerlink" title="Statement (leetcode: 724)"></a>Statement (leetcode: 724)</h3><p>Given an array of integers nums, write a method that returns the “pivot” index of this array.<br>We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.<br>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">nums = [1, 7, 3, 6, 5, 6]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.</span><br><span class="line">Also, 3 is the first index where this occurs.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">nums = [1, 2, 3]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: </span><br><span class="line">There is no index that satisfies the conditions in the problem statement.</span><br></pre></td></tr></table></figure><h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pivotIndex(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, leftsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x: nums) sum += x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftsum == sum - leftsum - nums[i]) <span class="keyword">return</span> i;</span><br><span class="line">        leftsum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>/</td></tr><tr><td>Space</td><td>O(1)</td><td>/</td></tr></tbody></table></div><h2 id="Question-10-Complete-Binary-Tree"><a href="#Question-10-Complete-Binary-Tree" class="headerlink" title="Question 10: Complete Binary Tree"></a>Question 10: Complete Binary Tree</h2><h3 id="Statement-3"><a href="#Statement-3" class="headerlink" title="Statement"></a>Statement</h3><p>Given a complete binary tree in which each node marked with a number in level order (root = 1) and several connections are removed.<br>Find if the given number is still reachable from the root of the tree.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: tree = root, num = 5</span><br><span class="line">            1 -&gt; root</span><br><span class="line">           / \</span><br><span class="line">          /   \</span><br><span class="line">         /     \</span><br><span class="line">        /       \</span><br><span class="line">       /         \</span><br><span class="line">      2           3</span><br><span class="line">     /           / \</span><br><span class="line">    /           /   \</span><br><span class="line">   4     5     6     7</span><br><span class="line">  / \   / \   / \   / \</span><br><span class="line"> 8   9 10 11 12 13 14 15</span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: tree = root, num = 6</span><br><span class="line">            1 -&gt; root</span><br><span class="line">             \</span><br><span class="line">              \</span><br><span class="line">               \</span><br><span class="line">                \</span><br><span class="line">                 \</span><br><span class="line">      2           3</span><br><span class="line">     / \         / \</span><br><span class="line">    /   \       /   \</span><br><span class="line">   4     5     6     7</span><br><span class="line">  / \   / \   / \   / \</span><br><span class="line"> 8   9 10 11 12 13 14 15</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">findInCompleteTree</span><span class="params">(TreeNode root, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Boolean&gt; path = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            path.add(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            path.add(<span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">boolean</span> p : path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p) root = root.left;</span><br><span class="line">        <span class="keyword">else</span> root = root.right;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(log n)</td><td>/</td></tr><tr><td>Space</td><td>O(log n)</td><td>/</td></tr></tbody></table></div><h3 id="Extension-leetcode-222"><a href="#Extension-leetcode-222" class="headerlink" title="Extension (leetcode: 222)"></a>Extension (leetcode: 222)</h3><p>Count the number of node in a complete binary tree.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: tree = root</span><br><span class="line">            1 -&gt; root</span><br><span class="line">           / \</span><br><span class="line">          /   \</span><br><span class="line">         /     \</span><br><span class="line">        /       \</span><br><span class="line">       /         \</span><br><span class="line">      2           3</span><br><span class="line">     / \         / \</span><br><span class="line">    /   \       /   \</span><br><span class="line">   4     5     6     7</span><br><span class="line">  / \   / \   /</span><br><span class="line"> 8   9 10 11 12</span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countInCompleteTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    TreeNode node = root;</span><br><span class="line">    <span class="keyword">int</span> depthLeft = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        depthLeft++;</span><br><span class="line">        node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node = root;</span><br><span class="line">    <span class="keyword">int</span> depthRight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        depthRight++;</span><br><span class="line">        node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> depthLeft == depthRight ?</span><br><span class="line">        (<span class="number">1</span> &lt;&lt; depthLeft) - <span class="number">1</span> :</span><br><span class="line">        <span class="number">1</span> + countInCompleteTree(root.left) + countInCompleteTree(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(log n * log n)</td><td>log n calls and each call takes log n to compute depth</td></tr><tr><td>Space</td><td>O(log n)</td><td>recursive call stack</td></tr></tbody></table></div><h2 id="Question-11-UTF-8-Encoding"><a href="#Question-11-UTF-8-Encoding" class="headerlink" title="Question 11: UTF-8 Encoding"></a>Question 11: UTF-8 Encoding</h2><h3 id="Statement-4"><a href="#Statement-4" class="headerlink" title="Statement"></a>Statement</h3><p>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:</p><ul><li>For 1-byte character, the first bit is a 0, followed by its unicode code.</li><li>For n-bytes character, the first n-bits are all one’s, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.</li></ul><p>This is how the UTF-8 encoding would work:    </p><div class="table-container"><table><thead><tr><th>Number of bytes</th><th>Bits for code point</th><th>First code point</th><th>Last code point</th><th>Byte 1</th><th>Byte 2</th><th>Byte 3</th><th>Byte 4</th></tr></thead><tbody><tr><td>1</td><td>7</td><td>U+0000</td><td>U+007F</td><td>0xxxxxxx</td><td></td><td></td><td></td></tr><tr><td>2</td><td>11</td><td>U+0080</td><td>U+07FF</td><td>110xxxxx</td><td>10xxxxxx</td><td></td><td></td></tr><tr><td>3</td><td>16</td><td>U+0800</td><td>U+FFFF</td><td>1110xxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td></td></tr><tr><td>4</td><td>21</td><td>U+10000</td><td>U+10FFFF</td><td>11110xxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td></tr></tbody></table></div><p>Given a byte array which contains only UTF-8 encoded characters and an integer <code>limit</code>,<br>return the max number of bytes contains only valid UTF-8 encordings in the first <code>limit</code> bytes.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">stream = | 0xxxxxxx | 110xxxxx | 10xxxxxx | 1110xxxx | 10xxxxxx | 10xxxxxx | 11110xxx | 10xxxxxx ||| 10xxxxxx | 10xxxxxx |</span><br><span class="line">limit = 8</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">stream = | 0xxxxxxx | 110xxxxx | 10xxxxxx |</span><br><span class="line">limit = 5</span><br><span class="line"></span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countUTF8Byte</span><span class="params">(<span class="keyword">byte</span>[] stream, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stream.length &lt;= limit) &#123;</span><br><span class="line">        <span class="keyword">return</span> stream.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (limit &gt; <span class="number">0</span> &amp;&amp; (stream[limit] &amp; <span class="number">0xFF</span>) &gt;&gt; <span class="number">6</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            limit--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> limit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(1)</td><td>No more than 6 bytes</td></tr><tr><td>Space</td><td>O(1)</td><td>/</td></tr></tbody></table></div><h2 id="Question-12-Design-Rate-limiter"><a href="#Question-12-Design-Rate-limiter" class="headerlink" title="Question 12: Design Rate limiter"></a>Question 12: Design Rate limiter</h2><h3 id="Statement-inspired-by-leetcode-362"><a href="#Statement-inspired-by-leetcode-362" class="headerlink" title="Statement (inspired by leetcode: 362)"></a>Statement (inspired by leetcode: 362)</h3><p>Design rate limiter API based on the count limit per minute and per hour.<br>The granularity of timestamp is in second if needed.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RateLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize data structure */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateLimiter</span><span class="params">(<span class="keyword">long</span> minuteCount, <span class="keyword">long</span> hourCount)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="comment">/** Return true if the function calls exceeded either minuteCount or hourCount, otherwise return false */</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLimited</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">RateLimiter rl </span>= <span class="keyword">new</span> RateLimit(<span class="number">100</span>, <span class="number">6000</span>);</span><br><span class="line">rl.isLimited() <span class="comment">// return false;</span></span><br></pre></td></tr></table></figure><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HitCounter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>   numBucket;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] time;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] hit;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HitCounter</span><span class="params">(<span class="keyword">int</span> numBucket)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.numBucket = numBucket;</span><br><span class="line">            <span class="keyword">this</span>.time = <span class="keyword">new</span> <span class="keyword">int</span>[numBucket];</span><br><span class="line">            <span class="keyword">this</span>.hit = <span class="keyword">new</span> <span class="keyword">int</span>[numBucket];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hit</span><span class="params">(<span class="keyword">int</span> ts)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> bucket = ts % <span class="keyword">this</span>.numBucket;</span><br><span class="line">            <span class="keyword">if</span> (time[bucket] == ts) &#123;</span><br><span class="line">                hit[bucket]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time[bucket] = ts;</span><br><span class="line">                hit[bucket] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> ts)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.numBucket; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ts - time[i] &lt; <span class="keyword">this</span>.numBucket) &#123;</span><br><span class="line">                    cnt += hit[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span>       minuteLimit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span>       hourLimit;</span><br><span class="line">    <span class="keyword">private</span> HitCounter minuteCounter;</span><br><span class="line">    <span class="keyword">private</span> HitCounter hourCounter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateLimiter</span><span class="params">(<span class="keyword">long</span> minuteLimit, <span class="keyword">long</span> hourLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minuteLimit = minuteLimit;</span><br><span class="line">        <span class="keyword">this</span>.hourLimit = hourLimit;</span><br><span class="line">        <span class="keyword">this</span>.minuteCounter = <span class="keyword">new</span> HitCounter(<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">this</span>.hourCounter = <span class="keyword">new</span> HitCounter(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLimited</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tsInSec = (<span class="keyword">int</span>) (System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.minuteCounter.count(tsInSec) &lt; <span class="keyword">this</span>.minuteLimit &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.hourCounter.count(tsInSec) &lt; <span class="keyword">this</span>.hourLimit) &#123;</span><br><span class="line">            minuteCounter.hit(tsInSec);</span><br><span class="line">            hourCounter.hit(tsInSec);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RateLimiter rl = <span class="keyword">new</span> RateLimiter(<span class="number">10</span>, <span class="number">600</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span> (rl.isLimited()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">"Limit not reached: "</span> + count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Limit exceeded: "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>hit</th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(1)</td><td>/</td></tr><tr><td>Space</td><td>O(n)</td><td>number of the buckets</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>count</th><th>Complexity</th><th>Comments</th></tr></thead><tbody><tr><td>Time</td><td>O(n)</td><td>number of the buckets</td></tr><tr><td>Space</td><td>O(n)</td><td>number of the buckets</td></tr></tbody></table></div><h2 id="Question-13-Design-Task-Scheduler-cron"><a href="#Question-13-Design-Task-Scheduler-cron" class="headerlink" title="Question 13: Design Task Scheduler (cron)"></a>Question 13: Design Task Scheduler (<code>cron</code>)</h2><h3 id="Statement-5"><a href="#Statement-5" class="headerlink" title="Statement"></a>Statement</h3><p>Implement the following 3 methods. Start with scheduling part and then execution part.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronScheduler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, <span class="keyword">long</span> delay)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">repeat</span><span class="params">(TimerTask t, <span class="keyword">long</span> delay, <span class="keyword">long</span> period)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">daily</span><span class="params">(TimerTask t, <span class="keyword">long</span> delay)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>Reference: <code>java.util.Timer</code> and <code>java.util.TimerTask</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A list of coding interview question I encountered in 2018.&lt;/p&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://invkrh.me/categories/Interview/"/>
    
    
      <category term="Algorithm" scheme="http://invkrh.me/tags/Algorithm/"/>
    
      <category term="Coding" scheme="http://invkrh.me/tags/Coding/"/>
    
  </entry>
  
</feed>
